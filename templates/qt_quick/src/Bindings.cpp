/* generated by rust_qt_binding_generator */
#include "Bindings.h"

namespace {

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }
    inline void radicandParamChanged(Radicand* o)
    {
        Q_EMIT o->paramChanged();
    }
    inline void radicandRadChanged(Radicand* o)
    {
        Q_EMIT o->radChanged();
    }
    inline void timeHourChanged(Time* o)
    {
        Q_EMIT o->hourChanged();
    }
    inline void timeMinuteChanged(Time* o)
    {
        Q_EMIT o->minuteChanged();
    }
    inline void timeSecondChanged(Time* o)
    {
        Q_EMIT o->secondChanged();
    }
}
extern "C" {
    Radicand::Private* radicand_new(Radicand*, void (*)(Radicand*), void (*)(Radicand*));
    void radicand_free(Radicand::Private*);
    void radicand_param_get(const Radicand::Private*, QString*, qstring_set);
    void radicand_param_set(Radicand::Private*, const ushort *str, int len);
    quint32 radicand_rad_get(const Radicand::Private*);
};

extern "C" {
    Time::Private* time_new(Time*, void (*)(Time*), void (*)(Time*), void (*)(Time*));
    void time_free(Time::Private*);
    quint32 time_hour_get(const Time::Private*);
    quint32 time_minute_get(const Time::Private*);
    quint32 time_second_get(const Time::Private*);
};

Radicand::Radicand(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

Radicand::Radicand(QObject *parent):
    QObject(parent),
    m_d(radicand_new(this,
        radicandParamChanged,
        radicandRadChanged)),
    m_ownsPrivate(true)
{
}

Radicand::~Radicand() {
    if (m_ownsPrivate) {
        radicand_free(m_d);
    }
}
QString Radicand::param() const
{
    QString v;
    radicand_param_get(m_d, &v, set_qstring);
    return v;
}
void Radicand::setParam(const QString& v) {
    radicand_param_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
}
quint32 Radicand::rad() const
{
    return radicand_rad_get(m_d);
}
Time::Time(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

Time::Time(QObject *parent):
    QObject(parent),
    m_d(time_new(this,
        timeHourChanged,
        timeMinuteChanged,
        timeSecondChanged)),
    m_ownsPrivate(true)
{
}

Time::~Time() {
    if (m_ownsPrivate) {
        time_free(m_d);
    }
}
quint32 Time::hour() const
{
    return time_hour_get(m_d);
}
quint32 Time::minute() const
{
    return time_minute_get(m_d);
}
quint32 Time::second() const
{
    return time_second_get(m_d);
}
