/* generated by rust_qt_binding_generator */
use libc::{c_char, c_ushort, c_int};
use std::slice;
use std::char::decode_utf16;

use std::sync::Arc;
use std::sync::atomic::{AtomicPtr, Ordering};
use std::ptr::null;

use implementation::*;


pub enum QString {}

fn set_string_from_utf16(s: &mut String, str: *const c_ushort, len: c_int) {
    let utf16 = unsafe { slice::from_raw_parts(str, to_usize(len)) };
    let characters = decode_utf16(utf16.iter().cloned())
        .map(|r| r.unwrap());
    s.clear();
    s.extend(characters);
}



fn to_usize(n: c_int) -> usize {
    if n < 0 {
        panic!("Cannot cast {} to usize", n);
    }
    n as usize
}


fn to_c_int(n: usize) -> c_int {
    if n > c_int::max_value() as usize {
        panic!("Cannot cast {} to c_int", n);
    }
    n as c_int
}


pub struct RadicandQObject {}

pub struct RadicandEmitter {
    qobject: Arc<AtomicPtr<RadicandQObject>>,
    param_changed: extern fn(*mut RadicandQObject),
    result_changed: extern fn(*mut RadicandQObject),
}

unsafe impl Send for RadicandEmitter {}

impl RadicandEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> RadicandEmitter {
        RadicandEmitter {
            qobject: self.qobject.clone(),
            param_changed: self.param_changed,
            result_changed: self.result_changed,
        }
    }
    fn clear(&self) {
        let n: *const RadicandQObject = null();
        self.qobject.store(n as *mut RadicandQObject, Ordering::SeqCst);
    }
    pub fn param_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.param_changed)(ptr);
        }
    }
    pub fn result_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.result_changed)(ptr);
        }
    }
}

pub trait RadicandTrait {
    fn new(emit: RadicandEmitter) -> Self;
    fn emit(&mut self) -> &mut RadicandEmitter;
    fn param(&self) -> &str;
    fn set_param(&mut self, value: String);
    fn result(&self) -> &str;
}

#[no_mangle]
pub extern "C" fn radicand_new(
    radicand: *mut RadicandQObject,
    radicand_param_changed: extern fn(*mut RadicandQObject),
    radicand_result_changed: extern fn(*mut RadicandQObject),
) -> *mut Radicand {
    let radicand_emit = RadicandEmitter {
        qobject: Arc::new(AtomicPtr::new(radicand)),
        param_changed: radicand_param_changed,
        result_changed: radicand_result_changed,
    };
    let d_radicand = Radicand::new(radicand_emit);
    Box::into_raw(Box::new(d_radicand))
}

#[no_mangle]
pub unsafe extern "C" fn radicand_free(ptr: *mut Radicand) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn radicand_param_get(
    ptr: *const Radicand,
    p: *mut QString,
    set: extern fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.param();
    let s: *const c_char = v.as_ptr() as *const c_char;
    set(p, s, to_c_int(v.len()));
}

#[no_mangle]
pub unsafe extern "C" fn radicand_param_set(ptr: *mut Radicand, v: *const c_ushort, len: c_int) {
    let o = &mut *ptr;
    let mut s = String::new();
    set_string_from_utf16(&mut s, v, len);
    o.set_param(s);
}

#[no_mangle]
pub unsafe extern "C" fn radicand_result_get(
    ptr: *const Radicand,
    p: *mut QString,
    set: extern fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.result();
    let s: *const c_char = v.as_ptr() as *const c_char;
    set(p, s, to_c_int(v.len()));
}
